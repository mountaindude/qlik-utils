var url = require('url');
var XRegExp = require('xregexp');

var core = require('../../core').Core;
var base = require('../base').Base;

var exports = {};
module.exports = exports;

function addTo(tree, key, value) {
    if(key.length == 1) tree[key[0]] = value;
    else {
        if(Object.keys(tree).indexOf(key[0]) == -1) tree[key[0]] = {};
        addTo(tree[key[0]], key.slice(1), value)
    }
}

function createTo(node) {
    var retVal = [];
    Object.keys(node).forEach(function(key) {
        var str = "";
        if(key.match(/{([^{]+)}/g)) {
            str += key.replace(/{([^{]+)}/g, '$1') + ": function(" + key.replace(/{([^{]+)}/g, '$1') + ") {" + "\n";
            str += "return {" + "\n"
            str += createTo(node[key]).join(",\n") + "\n";
            str += "};\n"
            str += "}"
        }
        else {
            if(typeof node[key].function !== 'undefined') {
                str += node[key].comment + "\n"
                str += key + ": " + node[key].function
            } else {
                str += key + ": {" + "\n";
                str += createTo(node[key]).join(",\n") + "\n";
                str += "}";
            }
        }
        retVal.push(str);
    })
    return retVal;
}

function parseAPI(apiString) {

    var result = {
        api: undefined,
        httpMethod: undefined,
        path: [],
        pathParam: [],
        method: [],
        methodParam: [],
        queryString: []
    };

    var api = JSON.parse(apiString)

    var firstPass = XRegExp.exec(
        api.path,
        XRegExp(
            '^' +
            '/qrs/' +
            '(?<path>([^/]+/)+)?' +
            '(?<method>[^?]+)?' +
            '(' +
            '\\?' +
            '(?<queryString>([^?=&]+=[^?=&]+&)+)?' +
            '(?<queryStringLast>[^?=&]+=[^?=&]+)' +
            ')?'
        )
    );


    result.api = api;

    result.api.extended = XRegExp.exec(
        api.extended,
        XRegExp(
            '^\\[(.*)\\]$'
        )
    )[1].split(',').map(function(item) {
            return item.trim().split('=');
        }).reduce(function(p, c, i, o) {
            p[c[0]] = c[1];
            return p;
        }, {});

    result.httpMethod = api.method;

    if(typeof firstPass.path !== 'undefined') {
        result.path = firstPass.path.replace(/\/$/, '').split('/');
        result.pathParam = core.ifNotUndef(firstPass.path.match(/{([^{]+)}/g), []).map(function(match) { return match.replace(/{([^{]+)}/g, '$1') }).map(function(item) {
            return { key: item, value: item };
        });
    } else {
        result.path = [];
        result.pathParam = [];
    }

    if(typeof firstPass.method !== 'undefined') {
        result.method = [ firstPass.method ];
        result.methodParam = core.ifNotUndef(firstPass.method.match(/{([^{]+)}/g), [ firstPass.method.replace(/{([^{]+)}/g, '$1') ], []).map(function(item) {
            return { key: item, value: item };
        });
    } else {
        result.method = [];
        result.methodParam = [];
    }

    if(typeof firstPass.queryStringLast !== 'undefined') {
        result.queryString = core.ifNotUndef(firstPass.queryString, core.ifNotUndef(firstPass.queryString, '').replace(/&$/, '').split('&'), []).concat([ firstPass.queryStringLast ]).map(function(item) {
            var match = item.match(/^([^=]+)={([^=]+)}$/);
            if(match) return { key: match[1], value: match[2] };
        })
    } else {
        result.queryString = []
    }

    var funcParams = result.pathParam.concat(result.methodParam).concat(result.queryString);

    var method = {};

    var defaultParams = [ ];
    if (result.api.extended.bodytype && result.api.extended.bodytype !== "Void")
        defaultParams = defaultParams.concat([ {value: 'postParams'} ])

    method.key = result.path.concat(result.method).concat(result.httpMethod.toLowerCase());

    method.comment = "/**" + "\n" +
        " * Makes a request on the Qlik Sense QRS API:" + "\n" +
//  " * " + JSON.stringify(api) + "\n" +
        " * " + api.path + "\n" +
        " * This method is " + result.api.extended.resource + "\n" +
        " *" + "\n" +
        ((result.api.extended.bodytype && result.api.extended.bodytype !== "Void")
                ? " * @param {" + result.api.extended.bodytype + "} postParams the parameters to send as request body to the API endpoint" + "\n"
                : ""
        ) +
        result.queryString.map(function(item) {
            return " * @param {string=} " + item.value + " the " + item.value + " parameter" + "\n";
        }).join('') +
        ((result.api.extended.returntype && result.api.extended.returntype !== "Void")
                ? " * @returns {Promise<" + result.api.extended.returntype + ">} a promise resolving to the response to the request"
                : " * @returns {Promise} a promise resolving without a return value when the request is finished"
        ) + "\n" +
        " */";

    method.function = "function (" + defaultParams.concat(result.queryString).map(function(item) { return item.value; }).join(', ') + ") {" + "\n" +
        "	var restUri = url.parse(options.restUri);" + "\n" +
        "	return base.request({" + "\n" +
        "		restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/" + result.path.concat(result.method).map(function(item) {
            return item.replace(/{([^{]+)}/g, '\' + $1 + \'');
        }).join('/') + (
            (result.queryString.length > 1)
            ? "' + (" + result.queryString.map(function(item) { return "core.ifNotUndef(" + item.value + ", '&" + item.key + "=' + " + item.value + ", '')"; } ).join(" + ") + ").replace(/^&/, '?')"
            : ((result.queryString.length == 1) ? "' + " + result.queryString.map(function(item) { return "core.ifNotUndef(" + item.value + ", '?" + item.key + "=' + " + item.value + ", '')"; } ).join(" + ") : "'")
        ) + "," + "\n" +
        "		pfx: options.pfx," + "\n" +
        "		passPhrase: options.passPhrase," + "\n" +
        "		UserId: options.UserId," + "\n" +
        "		UserDirectory: options.UserDirectory," + "\n" +
        "		timeout: core.ifNotUndef(options.timeout, 60000)," + "\n" +
        "		method: '" + result.httpMethod + "'" + "\n" +
        "	}" + ((result.api.extended.bodytype && result.api.extended.bodytype !== "Void") ? ", postParams" : "") + ");" + "\n" +
        "}";

    return method;
}

exports.createQrsApiSdk = function(options) {

    var restUri = url.parse(options.restUri);

    return base.request({
        restUri: restUri.protocol + '//' + restUri.host + '/qrs/about/api/description?extended=true&format=JSON',
        pfx: options.pfx,
        UserId: options.UserId,
        UserDirectory: options.UserDirectory,
        timeout: 600000,
        method: 'GET'
    }).then(function(apis) {
        var methods = [];
        apis.forEach(function(api) {
            methods.push(parseAPI(api));
        });

        return methods;
    }).then(function(methods) {
        var methodTree = {};

        methods.forEach(function(method) {
            addTo(methodTree, method.key, method);
        });

        return methodTree;
    }).then(function(methodTree) {
        return 'function(options) { return { ' + createTo(methodTree).join(",\n") + '}}';
    }).fail(function(reply) {
        console.log(reply);
    });

};

exports.qrs = function(options) {
    return {
        about: {
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/about
             * This method is manual
             *
             * @returns {Promise<About>} a promise resolving to the response to the request
             */
            get: function () {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about',
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            api: {
                default: {
                    app: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/app?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<App>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/app' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appavailability: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/appavailability?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppAvailability>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/appavailability' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appcontentquota: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/appcontentquota?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppContentQuota>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/appcontentquota' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appseedinfo: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/appseedinfo?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppSeedInfo>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/appseedinfo' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appstatus: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/appstatus?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppStatus>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/appstatus' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    binarydelete: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/binarydelete?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<BinaryDelete>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/binarydelete' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    binarydownload: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/binarydownload?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<BinaryDownload>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/binarydownload' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    binarysyncruleevaluation: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/binarysyncruleevaluation?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<BinarySyncRuleEvaluation>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/binarysyncruleevaluation' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    compositeevent: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/compositeevent?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<CompositeEvent>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/compositeevent' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    compositeeventoperational: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/compositeeventoperational?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<CompositeEventOperational>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/compositeeventoperational' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    compositeeventruleoperational: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/compositeeventruleoperational?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<CompositeEventRuleOperational>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/compositeeventruleoperational' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    content: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/content?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppContent>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/content' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    contentlibrary: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/contentlibrary?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ContentLibrary>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/contentlibrary' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    custompropertydefinition: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/custompropertydefinition?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<CustomPropertyDefinition>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/custompropertydefinition' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    dataconnection: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/dataconnection?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<DataConnection>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/dataconnection' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    datasegment: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/datasegment?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppDataSegment>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/datasegment' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    detail: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/detail?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ExecutionResultDetail>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/detail' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    engineservice: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/engineservice?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<EngineService>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/engineservice' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    engineservicetemplate: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/engineservicetemplate?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<EngineServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/engineservicetemplate' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    executionresult: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/executionresult?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ExecutionResult>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/executionresult' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    executionsession: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/executionsession?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ExecutionSession>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/executionsession' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    extension: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/extension?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<Extension>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/extension' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    externalchangeinfo: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/externalchangeinfo?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ExternalChangeInfo>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/externalchangeinfo' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    externalprogramtask: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/externalprogramtask?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ExternalProgramTask>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/externalprogramtask' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    externalprogramtaskoperational: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/externalprogramtaskoperational?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ExternalProgramTaskOperational>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/externalprogramtaskoperational' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    filereference: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/filereference?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<FileReference>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/filereference' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    followingapp: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/followingapp?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<UserFollowingApp>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/followingapp' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    internal: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/internal?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppInternal>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/internal' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    license: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/license?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<License>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/license' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    localconfig: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/localconfig?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<LocalConfig>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/localconfig' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    loginaccesstype: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/loginaccesstype?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<LicenseLoginAccessType>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/loginaccesstype' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    loginaccessusage: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/loginaccessusage?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<LicenseLoginAccessUsage>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/loginaccessusage' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    mimetype: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/mimetype?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<MimeType>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/mimetype' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    object: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/object?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<AppObject>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/object' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    printingservice: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/printingservice?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<PrintingService>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/printingservice' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    printingservicetemplate: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/printingservicetemplate?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<PrintingServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/printingservicetemplate' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    proxyservice: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/proxyservice?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ProxyService>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/proxyservice' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    proxyservicetemplate: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/proxyservicetemplate?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ProxyServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/proxyservicetemplate' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    recentapp: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/recentapp?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<UserRecentApp>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/recentapp' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    reloadtask: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/reloadtask?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ReloadTask>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/reloadtask' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    reloadtaskoperational: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/reloadtaskoperational?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ReloadTaskOperational>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/reloadtaskoperational' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    removedsystemrule: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/removedsystemrule?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<RemovedSystemRule>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/removedsystemrule' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    repositoryservice: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/repositoryservice?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<RepositoryService>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/repositoryservice' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    repositoryservicetemplate: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/repositoryservicetemplate?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<RepositoryServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/repositoryservicetemplate' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    schedulerservice: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/schedulerservice?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<SchedulerService>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/schedulerservice' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    schedulerservicetemplate: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/schedulerservicetemplate?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<SchedulerServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/schedulerservicetemplate' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    schemaevent: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/schemaevent?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<SchemaEvent>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/schemaevent' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    schemaeventoperational: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/schemaeventoperational?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<SchemaEventOperational>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/schemaeventoperational' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    selection: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/selection?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<Selection>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/selection' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    servernodeconfiguration: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/servernodeconfiguration?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ServerNodeConfiguration>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/servernodeconfiguration' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    servicestatus: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/servicestatus?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<ServiceStatus>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/servicestatus' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    staticcontentreference: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/staticcontentreference?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<StaticContentReference>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/staticcontentreference' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    stream: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/stream?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<Stream>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/stream' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    syncsession: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/syncsession?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<SyncSession>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/syncsession' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    systeminfo: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/systeminfo?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<SystemInfo>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/systeminfo' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    systemrule: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/systemrule?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<SystemRule>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/systemrule' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    tabledefinition: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/tabledefinition?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<TableDefinition>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/tabledefinition' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    tag: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/tag?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<Tag>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/tag' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    tempcontent: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/tempcontent?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<TempContent>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/tempcontent' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    termsacceptance: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/termsacceptance?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<TermsAcceptance>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/termsacceptance' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    user: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/user?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<User>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/user' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    useraccessgroup: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/useraccessgroup?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<LicenseUserAccessGroup>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/useraccessgroup' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    useraccesstype: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/useraccesstype?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<LicenseUserAccessType>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/useraccesstype' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    useraccessusage: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/useraccessusage?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<LicenseUserAccessUsage>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/useraccessusage' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    userdirectory: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/userdirectory?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<UserDirectory>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/userdirectory' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    userdirectorytemplate: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/userdirectorytemplate?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<UserDirectoryTemplate>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/userdirectorytemplate' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    usersynctask: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/usersynctask?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<UserSyncTask>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/usersynctask' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    usersynctaskoperational: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/usersynctaskoperational?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<UserSyncTaskOperational>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/usersynctaskoperational' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    virtualproxyconfig: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/about/api/default/virtualproxyconfig?listentries={listentries}
                         * This method is manual
                         *
                         * @param {string=} listentries the listentries parameter
                         * @returns {Promise<VirtualProxyConfig>} a promise resolving to the response to the request
                         */
                        get: function (listentries) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default/virtualproxyconfig' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/about/api/default?listentries={listentries}
                     * This method is manual
                     *
                     * @param {string=} listentries the listentries parameter
                     * @returns {Promise<IDictionary<String>} a promise resolving to the response to the request
                     */
                    get: function (listentries) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/default' + core.ifNotUndef(listentries, '?listentries=' + listentries, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                description: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/about/api/description?extended={extended}&method={method}&format={format}
                     * This method is manual
                     *
                     * @param {string=} extended the extended parameter
                     * @param {string=} method the method parameter
                     * @param {string=} format the format parameter
                     * @returns {Promise<IList<String>>} a promise resolving to the response to the request
                     */
                    get: function (extended, method, format) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/description' + (core.ifNotUndef(extended, '&extended=' + extended, '') + core.ifNotUndef(method, '&method=' + method, '') + core.ifNotUndef(format, '&format=' + format, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                enums: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/about/api/enums
                     * This method is manual
                     *
                     * @returns {Promise<IDictionary<String>} a promise resolving to the response to the request
                     */
                    get: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/enums',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                relations: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/about/api/relations
                     * This method is manual
                     *
                     * @returns {Promise<IList<String>>} a promise resolving to the response to the request
                     */
                    get: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/about/api/relations',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                }
            }
        },
        app: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/{id}
                     * This method is manual
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    copy: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/copy?name={name}
                         * This method is manual
                         *
                         * @param {string=} name the name parameter
                         * @returns {Promise<App>} a promise resolving to the response to the request
                         */
                        post: function (name) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/copy' + core.ifNotUndef(name, '?name=' + name, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            });
                        }
                    },
                    export: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/export
                         * This method is manual
                         *
                         * @returns {Promise<Guid>} a promise resolving to the response to the request
                         */
                        get: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/export',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    migrate: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/migrate
                         * This method is manual
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        put: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/migrate',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            });
                        }
                    },
                    migrationcompleted: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/migrationcompleted
                         * This method is manual
                         *
                         * @param {AppMigrationStatus} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/migrationcompleted',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    },
                    privileges: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/privileges
                         * This method is manual
                         *
                         * @returns {Promise<IEnumerable`1>} a promise resolving to the response to the request
                         */
                        get: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/privileges',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    publish: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/publish?stream={streamid}&name={name}
                         * This method is manual
                         *
                         * @param {string=} streamid the streamid parameter
                         * @param {string=} name the name parameter
                         * @returns {Promise<App>} a promise resolving to the response to the request
                         */
                        put: function (streamid, name) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/publish' + (core.ifNotUndef(streamid, '&stream=' + streamid, '') + core.ifNotUndef(name, '&name=' + name, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            });
                        }
                    },
                    reload: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/reload
                         * This method is manual
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        post: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/reload',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            });
                        }
                    },
                    replace: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/replace?app={appid}
                         * This method is manual
                         *
                         * @param {string=} appid the appid parameter
                         * @returns {Promise<App>} a promise resolving to the response to the request
                         */
                        put: function (appid) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/replace' + core.ifNotUndef(appid, '?app=' + appid, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            });
                        }
                    },
                    state: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/{id}/state
                         * This method is manual
                         *
                         * @returns {Promise<AppState>} a promise resolving to the response to the request
                         */
                        get: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '/state',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<App>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {App} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<App>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            content: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/content/{id}?privileges={appendprivileges}
                         * This method is manual
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<AppContent>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/content/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/content/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/content/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/content/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is manual
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<AppContent>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/content/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/content/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is manual
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/content/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/content?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is manual
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppContent>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/content' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            datasegment: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/datasegment/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<AppDataSegment>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/datasegment/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/datasegment/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/datasegment/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/datasegment/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<AppDataSegment>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/datasegment/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/datasegment/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/datasegment/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/datasegment?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppDataSegment>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/datasegment' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<App>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            import: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/import?name={name}&keepdata={keepdata}&replace={replace}&privileges={appendprivileges}&excludeconnections={excludeconnections}
                 * This method is manual
                 *
                 * @param {String} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} name the name parameter
                 * @param {string=} keepdata the keepdata parameter
                 * @param {string=} replace the replace parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @param {string=} excludeconnections the excludeconnections parameter
                 * @returns {Promise<App>} a promise resolving to the response to the request
                 */
                post: function (postParams, name, keepdata, replace, appendprivileges, excludeconnections) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/import' + (core.ifNotUndef(name, '&name=' + name, '') + core.ifNotUndef(keepdata, '&keepdata=' + keepdata, '') + core.ifNotUndef(replace, '&replace=' + replace, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '') + core.ifNotUndef(excludeconnections, '&excludeconnections=' + excludeconnections, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            internal: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/internal/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<AppInternal>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/internal/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/internal/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/internal/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/internal/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<AppInternal>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/internal/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/internal/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/internal/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/internal?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppInternal>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/internal' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            object: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/object/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        publish: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/app/object/{id}/publish
                             * This method is manual
                             *
                             * @returns {Promise<AppObject>} a promise resolving to the response to the request
                             */
                            put: function () {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/' + id + '/publish',
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                });
                            }
                        },
                        unpublish: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/app/object/{id}/unpublish
                             * This method is manual
                             *
                             * @returns {Promise<AppObject>} a promise resolving to the response to the request
                             */
                            put: function () {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/' + id + '/unpublish',
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/object/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<AppObject>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/app/object/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {AppObject} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<AppObject>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/object/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/object/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<AppObject>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/app/object/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/object?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppObject>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/object' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/previewcreateprivilege
                 * This method is manual
                 *
                 * @param {App} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            upload: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/app/upload?name={name}&keepdata={keepdata}&replace={replace}&privileges={appendprivileges}&excludeconnections={excludeconnections}
                 * This method is manual
                 *
                 * @param {String} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} name the name parameter
                 * @param {string=} keepdata the keepdata parameter
                 * @param {string=} replace the replace parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @param {string=} excludeconnections the excludeconnections parameter
                 * @returns {Promise<App>} a promise resolving to the response to the request
                 */
                post: function (postParams, name, keepdata, replace, appendprivileges, excludeconnections) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app/upload' + (core.ifNotUndef(name, '&name=' + name, '') + core.ifNotUndef(keepdata, '&keepdata=' + keepdata, '') + core.ifNotUndef(replace, '&replace=' + replace, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '') + core.ifNotUndef(excludeconnections, '&excludeconnections=' + excludeconnections, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/app?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<App>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/app' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        appavailability: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/appavailability/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<AppAvailability>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appavailability/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appavailability/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appavailability/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appavailability/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppAvailability>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appavailability/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appavailability/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appavailability/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/appavailability?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<AppAvailability>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appavailability' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        appcomponent: {
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appcomponent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<IAppComponent>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcomponent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appcomponent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcomponent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/appcomponent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<IAppComponent>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcomponent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        appcontent: {
            appid: function(appid) {
                return {
                    deletecontent: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/appcontent/{appid}/deletecontent?externalpath={externalpath}
                         * This method is manual
                         *
                         * @param {string=} externalpath the externalpath parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (externalpath) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontent/' + appid + '/deletecontent' + core.ifNotUndef(externalpath, '?externalpath=' + externalpath, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        }
                    },
                    uploadfile: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/appcontent/{appid}/uploadfile?externalpath={externalpath}&overwrite={overwrite}
                         * This method is manual
                         *
                         * @param {String} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} externalpath the externalpath parameter
                         * @param {string=} overwrite the overwrite parameter
                         * @returns {Promise<String>} a promise resolving to the response to the request
                         */
                        post: function (postParams, externalpath, overwrite) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontent/' + appid + '/uploadfile' + (core.ifNotUndef(externalpath, '&externalpath=' + externalpath, '') + core.ifNotUndef(overwrite, '&overwrite=' + overwrite, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    }
                };
            }
        },
        appcontentquota: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/appcontentquota/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<AppContentQuota>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontentquota/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/appcontentquota/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {AppContentQuota} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<AppContentQuota>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontentquota/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appcontentquota/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontentquota/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appcontentquota/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppContentQuota>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontentquota/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appcontentquota/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontentquota/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/appcontentquota?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<AppContentQuota>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appcontentquota' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        applicationlog: {
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/applicationlog
             * This method is manual
             *
             * @param {ApplicationLogInfo} postParams the parameters to send as request body to the API endpoint
             * @returns {Promise} a promise resolving without a return value when the request is finished
             */
            post: function (postParams) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/applicationlog',
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        appseedinfo: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/appseedinfo/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<AppSeedInfo>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appseedinfo/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appseedinfo/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appseedinfo/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appseedinfo/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppSeedInfo>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appseedinfo/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appseedinfo/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appseedinfo/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/appseedinfo?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<AppSeedInfo>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appseedinfo' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        appstatus: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/appstatus/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<AppStatus>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appstatus/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appstatus/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appstatus/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appstatus/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<AppStatus>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appstatus/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/appstatus/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appstatus/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/appstatus?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<AppStatus>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/appstatus' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        binarydelete: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/binarydelete/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<BinaryDelete>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydelete/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarydelete/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydelete/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarydelete/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<BinaryDelete>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydelete/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarydelete/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydelete/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/binarydelete?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<BinaryDelete>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydelete' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        binarydownload: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/binarydownload/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<BinaryDownload>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydownload/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarydownload/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydownload/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarydownload/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<BinaryDownload>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydownload/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarydownload/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydownload/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/binarydownload?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<BinaryDownload>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarydownload' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        binarysyncruleevaluation: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/binarysyncruleevaluation/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<BinarySyncRuleEvaluation>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarysyncruleevaluation/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarysyncruleevaluation/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarysyncruleevaluation/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarysyncruleevaluation/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<BinarySyncRuleEvaluation>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarysyncruleevaluation/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/binarysyncruleevaluation/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarysyncruleevaluation/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/binarysyncruleevaluation?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<BinarySyncRuleEvaluation>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/binarysyncruleevaluation' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        cache: {
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/cache
             * This method is manual
             *
             * @returns {Promise} a promise resolving without a return value when the request is finished
             */
            delete: function () {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/cache',
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'DELETE'
                });
            }
        },
        certificatedistribution: {
            distributecertificate: {
                servernodeconfigurationid: function(servernodeconfigurationid) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/certificatedistribution/distributecertificate/{servernodeconfigurationid}
                         * This method is manual
                         *
                         * @returns {Promise<String>} a promise resolving to the response to the request
                         */
                        get: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/certificatedistribution/distributecertificate/' + servernodeconfigurationid + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    };
                }
            },
            exportcertificates: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/certificatedistribution/exportcertificates
                 * This method is manual
                 *
                 * @param {ExportParameters} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<String>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/certificatedistribution/exportcertificates',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            exportcertificatespath: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/certificatedistribution/exportcertificatespath
                 * This method is manual
                 *
                 * @returns {Promise<String>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/certificatedistribution/exportcertificatespath',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            redistributecertificate: {
                servernodeconfigurationid: function(servernodeconfigurationid) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/certificatedistribution/redistributecertificate/{servernodeconfigurationid}
                         * This method is manual
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        head: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/certificatedistribution/redistributecertificate/' + servernodeconfigurationid + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'HEAD'
                            });
                        }
                    };
                }
            }
        },
        compositeevent: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeevent/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeevent/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CompositeEvent>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeevent/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {CompositeEvent} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CompositeEvent>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeevent/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeevent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CompositeEvent>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeevent/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<CompositeEvent>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CompositeEvent>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeevent/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {CompositeEvent} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeevent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/compositeevent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<CompositeEvent>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/compositeevent?privileges={appendprivileges}
             * This method is generated
             *
             * @param {CompositeEvent} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<CompositeEvent>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeevent' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        compositeeventoperational: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeeventoperational/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeeventoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CompositeEventOperational>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeeventoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {CompositeEventOperational} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CompositeEventOperational>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventoperational/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CompositeEventOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventoperational/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<CompositeEventOperational>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CompositeEventOperational>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventoperational/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {CompositeEventOperational} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/compositeeventoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<CompositeEventOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/compositeeventoperational?privileges={appendprivileges}
             * This method is generated
             *
             * @param {CompositeEventOperational} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<CompositeEventOperational>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventoperational' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        compositeeventruleoperational: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeeventruleoperational/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeeventruleoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CompositeEventRuleOperational>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/compositeeventruleoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {CompositeEventRuleOperational} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CompositeEventRuleOperational>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventruleoperational/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventruleoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CompositeEventRuleOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventruleoperational/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<CompositeEventRuleOperational>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CompositeEventRuleOperational>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventruleoperational/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {CompositeEventRuleOperational} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/compositeeventruleoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/compositeeventruleoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<CompositeEventRuleOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/compositeeventruleoperational?privileges={appendprivileges}
             * This method is generated
             *
             * @param {CompositeEventRuleOperational} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<CompositeEventRuleOperational>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/compositeeventruleoperational' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        contentlibrary: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/contentlibrary/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/contentlibrary/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ContentLibrary>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/contentlibrary/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ContentLibrary} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ContentLibrary>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            libname: function(libname) {
                return {
                    deletecontent: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/contentlibrary/{libname}/deletecontent?externalpath={externalpath}
                         * This method is manual
                         *
                         * @param {string=} externalpath the externalpath parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (externalpath) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/' + libname + '/deletecontent' + core.ifNotUndef(externalpath, '?externalpath=' + externalpath, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        }
                    },
                    uploadfile: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/contentlibrary/{libname}/uploadfile?externalpath={externalpath}&overwrite={overwrite}
                         * This method is manual
                         *
                         * @param {String} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} externalpath the externalpath parameter
                         * @param {string=} overwrite the overwrite parameter
                         * @returns {Promise<String>} a promise resolving to the response to the request
                         */
                        post: function (postParams, externalpath, overwrite) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/' + libname + '/uploadfile' + (core.ifNotUndef(externalpath, '&externalpath=' + externalpath, '') + core.ifNotUndef(overwrite, '&overwrite=' + overwrite, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/contentlibrary/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/contentlibrary/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ContentLibrary>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/contentlibrary/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ContentLibrary>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ContentLibrary>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/contentlibrary/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ContentLibrary} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/contentlibrary/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/contentlibrary?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ContentLibrary>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/contentlibrary?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ContentLibrary} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ContentLibrary>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/contentlibrary' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        custompropertydefinition: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/custompropertydefinition/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/custompropertydefinition/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CustomPropertyDefinition>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/custompropertydefinition/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {CustomPropertyDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<CustomPropertyDefinition>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/custompropertydefinition/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/custompropertydefinition/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CustomPropertyDefinition>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/custompropertydefinition/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<CustomPropertyDefinition>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<CustomPropertyDefinition>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/custompropertydefinition/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {CustomPropertyDefinition} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/custompropertydefinition/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/custompropertydefinition?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<CustomPropertyDefinition>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/custompropertydefinition?privileges={appendprivileges}
             * This method is generated
             *
             * @param {CustomPropertyDefinition} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<CustomPropertyDefinition>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/custompropertydefinition' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        dataconnection: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/dataconnection/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/dataconnection/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<DataConnection>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/dataconnection/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {DataConnection} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<DataConnection>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/dataconnection/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/dataconnection/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<DataConnection>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/dataconnection/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<DataConnection>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<DataConnection>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/dataconnection/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {DataConnection} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/dataconnection/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/dataconnection?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<DataConnection>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/dataconnection?privileges={appendprivileges}
             * This method is generated
             *
             * @param {DataConnection} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<DataConnection>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/dataconnection' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        download: {
            app: {
                id: function(id) {
                    return {
                        exportticketid: function(exportticketid) {
                            return {
                                localfilename: function(localfilename) {
                                    return {
                                        /**
                                         * Makes a request on the Qlik Sense QRS API:
                                         * /qrs/download/app/{id}/{exportticketid}/{localfilename}
                                         * This method is manual
                                         *
                                         * @returns {Promise<FileDownloadInfo>} a promise resolving to the response to the request
                                         */
                                        get: function () {
                                            var restUri = url.parse(options.restUri);
                                            return base.request({
                                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/download/app/' + id + '/' + exportticketid + '/' + localfilename + '',
                                                pfx: options.pfx,
                                                passPhrase: options.passPhrase,
                                                UserId: options.UserId,
                                                UserDirectory: options.UserDirectory,
                                                timeout: core.ifNotUndef(options.timeout, 60000),
                                                method: 'GET'
                                            });
                                        }
                                    };
                                }
                            };
                        }
                    };
                }
            },
            reloadtask: {
                downloadticketid: function(downloadticketid) {
                    return {
                        localfilename: function(localfilename) {
                            return {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/download/reloadtask/{downloadticketid}/{localfilename}
                                 * This method is manual
                                 *
                                 * @returns {Promise<FileDownloadInfo>} a promise resolving to the response to the request
                                 */
                                get: function () {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/download/reloadtask/' + downloadticketid + '/' + localfilename + '',
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            };
                        }
                    };
                }
            },
            samlmetadata: {
                exportticketid: function(exportticketid) {
                    return {
                        localfilename: function(localfilename) {
                            return {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/download/samlmetadata/{exportticketid}/{localfilename}
                                 * This method is manual
                                 *
                                 * @returns {Promise<FileDownloadInfo>} a promise resolving to the response to the request
                                 */
                                get: function () {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/download/samlmetadata/' + exportticketid + '/' + localfilename + '',
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            };
                        }
                    };
                }
            }
        },
        engineservice: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/engineservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<EngineService>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/engineservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {EngineService} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<EngineService>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/engineservice/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/engineservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<EngineService>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            local: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/engineservice/local
                 * This method is manual
                 *
                 * @returns {Promise<EngineService>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/local',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/engineservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            template: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/engineservice/template/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/engineservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<EngineServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/engineservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {EngineServiceTemplate} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<EngineServiceTemplate>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/engineservice/template/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/engineservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<EngineServiceTemplate>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/engineservice/template/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<EngineServiceTemplate>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<EngineServiceTemplate>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/engineservice/template/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {EngineServiceTemplate} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/engineservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/engineservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<EngineServiceTemplate>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/engineservice/template?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {EngineServiceTemplate} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<EngineServiceTemplate>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice/template' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/engineservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<EngineService>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/engineservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        event: {
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/event/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<IEvent>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/event/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/event/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/event/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/event?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<IEvent>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/event' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        eventoperational: {
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/eventoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<IEventOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/eventoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/eventoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/eventoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/eventoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<IEventOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/eventoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        executionresult: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExecutionResult>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ExecutionResult} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExecutionResult>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionresult/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            detail: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/executionresult/detail/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/executionresult/detail/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<ExecutionResultDetail>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/executionresult/detail/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {ExecutionResultDetail} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<ExecutionResultDetail>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/detail/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/detail/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<ExecutionResultDetail>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/detail/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<ExecutionResultDetail>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<ExecutionResultDetail>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/detail/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {ExecutionResultDetail} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionresult/detail/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionresult/detail?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExecutionResultDetail>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionresult/detail?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {ExecutionResultDetail} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<ExecutionResultDetail>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/detail' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionresult/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExecutionResult>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionresult/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ExecutionResult>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExecutionResult>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionresult/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ExecutionResult} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionresult/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/executionresult?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ExecutionResult>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/executionresult?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ExecutionResult} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ExecutionResult>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionresult' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        executionsession: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionsession/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionsession/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExecutionSession>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/executionsession/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ExecutionSession} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExecutionSession>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionsession/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionsession/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExecutionSession>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionsession/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ExecutionSession>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExecutionSession>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionsession/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ExecutionSession} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/executionsession/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/executionsession?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ExecutionSession>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/executionsession?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ExecutionSession} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ExecutionSession>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/executionsession' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        extension: {
            extension: function(extension) {
                return {
                    deletecontent: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/extension/{extension}/deletecontent?externalpath={externalpath}
                         * This method is manual
                         *
                         * @param {string=} externalpath the externalpath parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (externalpath) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/' + extension + '/deletecontent' + core.ifNotUndef(externalpath, '?externalpath=' + externalpath, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        }
                    },
                    uploadfile: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/extension/{extension}/uploadfile?externalpath={externalpath}&overwrite={overwrite}
                         * This method is manual
                         *
                         * @param {String} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} externalpath the externalpath parameter
                         * @param {string=} overwrite the overwrite parameter
                         * @returns {Promise<String>} a promise resolving to the response to the request
                         */
                        post: function (postParams, externalpath, overwrite) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/' + extension + '/uploadfile' + (core.ifNotUndef(externalpath, '&externalpath=' + externalpath, '') + core.ifNotUndef(overwrite, '&overwrite=' + overwrite, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    }
                };
            },
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/extension/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/extension/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Extension>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/extension/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {Extension} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Extension>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/extension/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/extension/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Extension>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/extension/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<Extension>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Extension>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            name: {
                extension: function(extension) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/extension/name/{extension}
                         * This method is manual
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/name/' + extension + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/extension/name/{extension}?privileges={appendprivileges}
                         * This method is manual
                         *
                         * @param {String} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<Extension>} a promise resolving to the response to the request
                         */
                        post: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/name/' + extension + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    };
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/extension/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {Extension} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            schema: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/extension/schema
                 * This method is manual
                 *
                 * @returns {Promise<Dictionary<String>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/schema',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/extension/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            upload: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/extension/upload?pwd={password}&privileges={appendprivileges}
                 * This method is manual
                 *
                 * @param {String} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} password the password parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Extension>>} a promise resolving to the response to the request
                 */
                post: function (postParams, password, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension/upload' + (core.ifNotUndef(password, '&pwd=' + password, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/extension?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<Extension>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/extension?privileges={appendprivileges}
             * This method is generated
             *
             * @param {Extension} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<Extension>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/extension' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        externalchangeinfo: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalchangeinfo/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalchangeinfo/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExternalChangeInfo>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalchangeinfo/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ExternalChangeInfo} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExternalChangeInfo>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalchangeinfo/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalchangeinfo/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExternalChangeInfo>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalchangeinfo/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ExternalChangeInfo>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExternalChangeInfo>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalchangeinfo/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ExternalChangeInfo} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalchangeinfo/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/externalchangeinfo?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ExternalChangeInfo>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/externalchangeinfo?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ExternalChangeInfo} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ExternalChangeInfo>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalchangeinfo' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        externalprogramtask: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalprogramtask/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalprogramtask/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExternalProgramTask>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalprogramtask/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ExternalProgramTask} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExternalProgramTask>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtask/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtask/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExternalProgramTask>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtask/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ExternalProgramTask>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExternalProgramTask>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtask/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ExternalProgramTask} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtask/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/externalprogramtask?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ExternalProgramTask>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/externalprogramtask?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ExternalProgramTask} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ExternalProgramTask>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtask' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        externalprogramtaskoperational: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalprogramtaskoperational/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalprogramtaskoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExternalProgramTaskOperational>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/externalprogramtaskoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ExternalProgramTaskOperational} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ExternalProgramTaskOperational>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtaskoperational/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtaskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExternalProgramTaskOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtaskoperational/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ExternalProgramTaskOperational>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ExternalProgramTaskOperational>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtaskoperational/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ExternalProgramTaskOperational} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/externalprogramtaskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/externalprogramtaskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ExternalProgramTaskOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/externalprogramtaskoperational?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ExternalProgramTaskOperational} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ExternalProgramTaskOperational>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/externalprogramtaskoperational' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        filereference: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/filereference/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<FileReference>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/filereference/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/filereference/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/filereference/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/filereference/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<FileReference>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/filereference/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/filereference/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/filereference/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/filereference?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<FileReference>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/filereference' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        license: {
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/license/?control={control}&privileges={appendprivileges}
             * This method is manual
             *
             * @param {License} postParams the parameters to send as request body to the API endpoint
             * @param {string=} control the control parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<License>} a promise resolving to the response to the request
             */
            post: function (postParams, control, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license' + (core.ifNotUndef(control, '&control=' + control, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/license/?privileges={appendprivileges}
             * This method is manual
             *
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<License>} a promise resolving to the response to the request
             */
            get: function (appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/{id}?control={control}&privileges={appendprivileges}
                     * This method is manual
                     *
                     * @param {License} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} control the control parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<License>} a promise resolving to the response to the request
                     */
                    put: function (postParams, control, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/' + id + '' + (core.ifNotUndef(control, '&control=' + control, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            accesstypeinfo: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/accesstypeinfo
                 * This method is manual
                 *
                 * @returns {Promise<AccessTypesInfo>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/accesstypeinfo',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            datamarket: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/datamarket/?control={control}&privileges={appendprivileges}
                 * This method is manual
                 *
                 * @param {License} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} control the control parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<License>} a promise resolving to the response to the request
                 */
                post: function (postParams, control, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/datamarket' + (core.ifNotUndef(control, '&control=' + control, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/datamarket/?privileges={appendprivileges}
                 * This method is manual
                 *
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<License>} a promise resolving to the response to the request
                 */
                get: function (appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/datamarket' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/datamarket/{id}?control={control}&privileges={appendprivileges}
                         * This method is manual
                         *
                         * @param {License} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} control the control parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<License>} a promise resolving to the response to the request
                         */
                        put: function (postParams, control, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/datamarket/' + id + '' + (core.ifNotUndef(control, '&control=' + control, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                }
            },
            download: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/download?serial={serial}&control={control}&user={user}&org={org}
                 * This method is manual
                 *
                 * @param {string=} serial the serial parameter
                 * @param {string=} control the control parameter
                 * @param {string=} user the user parameter
                 * @param {string=} org the org parameter
                 * @returns {Promise<String>} a promise resolving to the response to the request
                 */
                get: function (serial, control, user, org) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/download' + (core.ifNotUndef(serial, '&serial=' + serial, '') + core.ifNotUndef(control, '&control=' + control, '') + core.ifNotUndef(user, '&user=' + user, '') + core.ifNotUndef(org, '&org=' + org, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            loginaccesstype: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/loginaccesstype/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/loginaccesstype/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseLoginAccessType>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/loginaccesstype/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {LicenseLoginAccessType} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseLoginAccessType>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccesstype/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccesstype/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseLoginAccessType>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccesstype/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<LicenseLoginAccessType>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseLoginAccessType>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccesstype/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {LicenseLoginAccessType} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccesstype/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/loginaccesstype?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<LicenseLoginAccessType>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/loginaccesstype?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {LicenseLoginAccessType} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<LicenseLoginAccessType>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccesstype' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            loginaccessusage: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/loginaccessusage/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseLoginAccessUsage>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccessusage/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccessusage/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccessusage/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccessusage/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseLoginAccessUsage>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccessusage/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/loginaccessusage/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccessusage/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/loginaccessusage?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<LicenseLoginAccessUsage>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/loginaccessusage' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            requestaccesstype: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/requestaccesstype
                 * This method is manual
                 *
                 * @param {AccessTypeRequest} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<AccessTypeResult>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/requestaccesstype',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            useraccessgroup: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/useraccessgroup/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/useraccessgroup/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseUserAccessGroup>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/useraccessgroup/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {LicenseUserAccessGroup} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseUserAccessGroup>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessgroup/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessgroup/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseUserAccessGroup>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessgroup/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<LicenseUserAccessGroup>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseUserAccessGroup>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessgroup/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {LicenseUserAccessGroup} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessgroup/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/useraccessgroup?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<LicenseUserAccessGroup>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/useraccessgroup?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {LicenseUserAccessGroup} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<LicenseUserAccessGroup>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessgroup' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            useraccesstype: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/useraccesstype/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/useraccesstype/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseUserAccessType>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/useraccesstype/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {LicenseUserAccessType} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseUserAccessType>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccesstype/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccesstype/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseUserAccessType>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccesstype/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<LicenseUserAccessType>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseUserAccessType>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccesstype/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {LicenseUserAccessType} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccesstype/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/useraccesstype?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<LicenseUserAccessType>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/useraccesstype?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {LicenseUserAccessType} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<LicenseUserAccessType>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccesstype' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            useraccessusage: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/license/useraccessusage/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<LicenseUserAccessUsage>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessusage/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessusage/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessusage/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessusage/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<LicenseUserAccessUsage>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessusage/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/license/useraccessusage/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessusage/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/license/useraccessusage?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<LicenseUserAccessUsage>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/license/useraccessusage' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            }
        },
        licenseaccessusage: {
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/licenseaccessusage/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ILicenseAccessUsage>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/licenseaccessusage/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/licenseaccessusage/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/licenseaccessusage/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/licenseaccessusage?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ILicenseAccessUsage>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/licenseaccessusage' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        loadbalancing: {
            validengines: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/loadbalancing/validengines
                 * This method is manual
                 *
                 * @param {LoadBalancingRequest} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<LoadBalancingResult>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/loadbalancing/validengines',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            }
        },
        log: {
            archive: {
                logrootsubfolder: function(logrootsubfolder) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/log/archive/{logrootsubfolder}
                         * This method is manual
                         *
                         * @param {String} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise<Guid>} a promise resolving to the response to the request
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/log/archive/' + logrootsubfolder + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    };
                }
            },
            rolled: {
                logrootsubfolder: function(logrootsubfolder) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/log/rolled/{logrootsubfolder}
                         * This method is manual
                         *
                         * @param {IEnumerable`1} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/log/rolled/' + logrootsubfolder + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    };
                }
            }
        },
        managementconsolelog: {
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/managementconsolelog
             * This method is manual
             *
             * @param {ManagementConsoleLogInfo} postParams the parameters to send as request body to the API endpoint
             * @returns {Promise} a promise resolving without a return value when the request is finished
             */
            post: function (postParams) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/managementconsolelog',
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        mimetype: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/mimetype/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/mimetype/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<MimeType>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/mimetype/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {MimeType} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<MimeType>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/mimetype/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/mimetype/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<MimeType>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/mimetype/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<MimeType>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<MimeType>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/mimetype/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {MimeType} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/mimetype/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/mimetype?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<MimeType>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/mimetype?privileges={appendprivileges}
             * This method is generated
             *
             * @param {MimeType} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<MimeType>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/mimetype' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        notification: {
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/notification/?handle={handle}
             * This method is manual
             *
             * @param {string=} handle the handle parameter
             * @returns {Promise} a promise resolving without a return value when the request is finished
             */
            delete: function (handle) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/notification' + core.ifNotUndef(handle, '?handle=' + handle, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'DELETE'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/notification/?name={typename}&id={id}&filter={filter}&condition={condition}&changetype={changetype}&propertyname={propertyname}
             * This method is manual
             *
             * @param {String} postParams the parameters to send as request body to the API endpoint
             * @param {string=} typename the typename parameter
             * @param {string=} id the id parameter
             * @param {string=} filter the filter parameter
             * @param {string=} condition the condition parameter
             * @param {string=} changetype the changetype parameter
             * @param {string=} propertyname the propertyname parameter
             * @returns {Promise<Guid>} a promise resolving to the response to the request
             */
            post: function (postParams, typename, id, filter, condition, changetype, propertyname) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/notification' + (core.ifNotUndef(typename, '&name=' + typename, '') + core.ifNotUndef(id, '&id=' + id, '') + core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(condition, '&condition=' + condition, '') + core.ifNotUndef(changetype, '&changetype=' + changetype, '') + core.ifNotUndef(propertyname, '&propertyname=' + propertyname, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            },
            changes: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/notification/changes?since={since}&types={types}
                 * This method is manual
                 *
                 * @param {string=} since the since parameter
                 * @param {string=} types the types parameter
                 * @returns {Promise<List<ChangesSinceOutput>>} a promise resolving to the response to the request
                 */
                get: function (since, types) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/notification/changes' + (core.ifNotUndef(since, '&since=' + since, '') + core.ifNotUndef(types, '&types=' + types, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            }
        },
        printingservice: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/printingservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<PrintingService>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/printingservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {PrintingService} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<PrintingService>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/printingservice/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/printingservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<PrintingService>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            local: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/printingservice/local
                 * This method is manual
                 *
                 * @returns {Promise<PrintingService>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/local',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/printingservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            template: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/printingservice/template/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/printingservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<PrintingServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/printingservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {PrintingServiceTemplate} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<PrintingServiceTemplate>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/printingservice/template/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/printingservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<PrintingServiceTemplate>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/printingservice/template/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<PrintingServiceTemplate>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<PrintingServiceTemplate>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/printingservice/template/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {PrintingServiceTemplate} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/printingservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/printingservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<PrintingServiceTemplate>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/printingservice/template?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {PrintingServiceTemplate} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<PrintingServiceTemplate>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice/template' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/printingservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<PrintingService>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/printingservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        proxyservice: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/proxyservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ProxyService>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/proxyservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ProxyService} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ProxyService>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/proxyservice/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/proxyservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ProxyService>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            local: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/proxyservice/local
                 * This method is manual
                 *
                 * @returns {Promise<ProxyService>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/local',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/proxyservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            template: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/proxyservice/template/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/proxyservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<ProxyServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/proxyservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {ProxyServiceTemplate} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<ProxyServiceTemplate>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/proxyservice/template/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/proxyservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<ProxyServiceTemplate>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/proxyservice/template/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<ProxyServiceTemplate>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<ProxyServiceTemplate>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/proxyservice/template/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {ProxyServiceTemplate} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/proxyservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/proxyservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ProxyServiceTemplate>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/proxyservice/template?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {ProxyServiceTemplate} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<ProxyServiceTemplate>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice/template' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/proxyservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ProxyService>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/proxyservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        reloadtask: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/reloadtask/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/reloadtask/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ReloadTask>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/reloadtask/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ReloadTask} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ReloadTask>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            reloadtaskid: function(reloadtaskid) {
                return {
                    scriptlog: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/reloadtask/{reloadtaskid}/scriptlog?filereferenceid={filereferenceid}
                         * This method is manual
                         *
                         * @param {string=} filereferenceid the filereferenceid parameter
                         * @returns {Promise<Guid>} a promise resolving to the response to the request
                         */
                        get: function (filereferenceid) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/' + reloadtaskid + '/scriptlog' + core.ifNotUndef(filereferenceid, '?filereferenceid=' + filereferenceid, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtask/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            create: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtask/create
                 * This method is manual
                 *
                 * @param {ReloadTaskBundle} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<ReloadTask>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/create',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtask/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ReloadTask>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtask/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ReloadTask>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ReloadTask>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtask/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ReloadTask} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtask/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            update: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtask/update
                 * This method is manual
                 *
                 * @param {ReloadTaskChange} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<ReloadTask>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask/update',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/reloadtask?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ReloadTask>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/reloadtask?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ReloadTask} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ReloadTask>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtask' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        reloadtaskoperational: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/reloadtaskoperational/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/reloadtaskoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ReloadTaskOperational>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/reloadtaskoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {ReloadTaskOperational} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ReloadTaskOperational>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtaskoperational/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtaskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ReloadTaskOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtaskoperational/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<ReloadTaskOperational>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ReloadTaskOperational>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtaskoperational/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {ReloadTaskOperational} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/reloadtaskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/reloadtaskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ReloadTaskOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/reloadtaskoperational?privileges={appendprivileges}
             * This method is generated
             *
             * @param {ReloadTaskOperational} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<ReloadTaskOperational>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/reloadtaskoperational' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        repositoryservice: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/repositoryservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<RepositoryService>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/repositoryservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {RepositoryService} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<RepositoryService>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/repositoryservice/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/repositoryservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<RepositoryService>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/repositoryservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            template: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/repositoryservice/template/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/repositoryservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<RepositoryServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/repositoryservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {RepositoryServiceTemplate} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<RepositoryServiceTemplate>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/repositoryservice/template/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/repositoryservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<RepositoryServiceTemplate>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/repositoryservice/template/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<RepositoryServiceTemplate>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<RepositoryServiceTemplate>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/repositoryservice/template/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {RepositoryServiceTemplate} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/repositoryservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/repositoryservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<RepositoryServiceTemplate>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/repositoryservice/template?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {RepositoryServiceTemplate} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<RepositoryServiceTemplate>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice/template' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/repositoryservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<RepositoryService>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/repositoryservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        schedulerservice: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schedulerservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SchedulerService>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schedulerservice/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {SchedulerService} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SchedulerService>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schedulerservice/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schedulerservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SchedulerService>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            local: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schedulerservice/local
                 * This method is manual
                 *
                 * @returns {Promise<SchedulerService>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/local',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schedulerservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            template: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/schedulerservice/template/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/schedulerservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<SchedulerServiceTemplate>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/schedulerservice/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {SchedulerServiceTemplate} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<SchedulerServiceTemplate>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schedulerservice/template/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schedulerservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<SchedulerServiceTemplate>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schedulerservice/template/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<SchedulerServiceTemplate>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<SchedulerServiceTemplate>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schedulerservice/template/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {SchedulerServiceTemplate} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schedulerservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schedulerservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SchedulerServiceTemplate>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schedulerservice/template?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {SchedulerServiceTemplate} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<SchedulerServiceTemplate>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice/template' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/schedulerservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<SchedulerService>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schedulerservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        schemaevent: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schemaevent/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schemaevent/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SchemaEvent>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schemaevent/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {SchemaEvent} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SchemaEvent>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaevent/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaevent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SchemaEvent>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaevent/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<SchemaEvent>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SchemaEvent>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaevent/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {SchemaEvent} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaevent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/schemaevent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<SchemaEvent>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/schemaevent?privileges={appendprivileges}
             * This method is generated
             *
             * @param {SchemaEvent} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<SchemaEvent>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaevent' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        schemaeventoperational: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schemaeventoperational/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schemaeventoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SchemaEventOperational>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/schemaeventoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {SchemaEventOperational} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SchemaEventOperational>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaeventoperational/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaeventoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SchemaEventOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaeventoperational/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<SchemaEventOperational>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SchemaEventOperational>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaeventoperational/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {SchemaEventOperational} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/schemaeventoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/schemaeventoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<SchemaEventOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/schemaeventoperational?privileges={appendprivileges}
             * This method is generated
             *
             * @param {SchemaEventOperational} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<SchemaEventOperational>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/schemaeventoperational' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        selection: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    app: {
                        content: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/content/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/content/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/content/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is manual
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<AppContent>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/content/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/content/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is manual
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/content/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/content/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is manual
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/content/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/content?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is manual
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppContent>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/content' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        datasegment: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/datasegment/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/datasegment/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/datasegment/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<AppDataSegment>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/datasegment/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/datasegment/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/datasegment/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/datasegment/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/datasegment/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/datasegment?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppDataSegment>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/datasegment' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<App>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        internal: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/internal/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/internal/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/internal/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<AppInternal>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/internal/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/internal/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/internal/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/internal/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/internal/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/internal?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppInternal>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/internal' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        object: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/object/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/object/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/object/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<AppObject>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/object/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/object/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/object/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/object/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/object/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/app/object/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/object/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/object?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/object' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/object?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppObject>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/object' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/app/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/app?filter={filter}
                         * This method is manual
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/app?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<App>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/app' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appavailability: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appavailability/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appavailability/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appavailability/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppAvailability>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appavailability/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appavailability/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appavailability/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appavailability/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appavailability/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/appavailability?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<AppAvailability>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appavailability' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appcomponent: {
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appcomponent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<IAppComponent>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcomponent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/appcomponent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<IAppComponent>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcomponent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appcontentquota: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appcontentquota/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcontentquota/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appcontentquota/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppContentQuota>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcontentquota/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appcontentquota/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcontentquota/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appcontentquota/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcontentquota/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appcontentquota/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcontentquota/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/appcontentquota?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<AppContentQuota>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appcontentquota' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appseedinfo: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appseedinfo/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appseedinfo/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appseedinfo/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppSeedInfo>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appseedinfo/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appseedinfo/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appseedinfo/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appseedinfo/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appseedinfo/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/appseedinfo?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<AppSeedInfo>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appseedinfo' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    appstatus: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appstatus/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appstatus/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appstatus/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<AppStatus>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appstatus/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appstatus/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appstatus/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/appstatus/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appstatus/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/appstatus?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<AppStatus>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/appstatus' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    binarydelete: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydelete/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydelete/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydelete/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<BinaryDelete>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydelete/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydelete/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydelete/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydelete/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydelete/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/binarydelete?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<BinaryDelete>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydelete' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    binarydownload: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydownload/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydownload/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydownload/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<BinaryDownload>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydownload/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydownload/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydownload/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarydownload/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydownload/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/binarydownload?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<BinaryDownload>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarydownload' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    binarysyncruleevaluation: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarysyncruleevaluation/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarysyncruleevaluation/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarysyncruleevaluation/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<BinarySyncRuleEvaluation>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarysyncruleevaluation/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarysyncruleevaluation/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarysyncruleevaluation/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/binarysyncruleevaluation/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarysyncruleevaluation/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/binarysyncruleevaluation?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<BinarySyncRuleEvaluation>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/binarysyncruleevaluation' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    compositeevent: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeevent/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeevent/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeevent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<CompositeEvent>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeevent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeevent/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeevent/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeevent/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeevent/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeevent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeevent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/compositeevent?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeevent' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/compositeevent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<CompositeEvent>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeevent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    compositeeventoperational: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventoperational/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<CompositeEventOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventoperational/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventoperational/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventoperational/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventoperational/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/compositeeventoperational?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/compositeeventoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<CompositeEventOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    compositeeventruleoperational: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventruleoperational/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventruleoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventruleoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<CompositeEventRuleOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventruleoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventruleoperational/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventruleoperational/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventruleoperational/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventruleoperational/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/compositeeventruleoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventruleoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/compositeeventruleoperational?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventruleoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/compositeeventruleoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<CompositeEventRuleOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/compositeeventruleoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    contentlibrary: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/contentlibrary/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/contentlibrary/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/contentlibrary/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ContentLibrary>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/contentlibrary/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/contentlibrary/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/contentlibrary/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/contentlibrary/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/contentlibrary/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/contentlibrary/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/contentlibrary/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/contentlibrary?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/contentlibrary' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/contentlibrary?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ContentLibrary>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/contentlibrary' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    custompropertydefinition: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/custompropertydefinition/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/custompropertydefinition/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/custompropertydefinition/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<CustomPropertyDefinition>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/custompropertydefinition/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/custompropertydefinition/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/custompropertydefinition/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/custompropertydefinition/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/custompropertydefinition/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/custompropertydefinition/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/custompropertydefinition/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/custompropertydefinition?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/custompropertydefinition' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/custompropertydefinition?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<CustomPropertyDefinition>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/custompropertydefinition' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    dataconnection: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/dataconnection/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/dataconnection/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/dataconnection/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<DataConnection>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/dataconnection/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/dataconnection/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/dataconnection/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/dataconnection/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/dataconnection/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/dataconnection/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/dataconnection/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/dataconnection?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/dataconnection' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/dataconnection?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<DataConnection>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/dataconnection' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    engineservice: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/engineservice/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/engineservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<EngineService>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/engineservice/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/engineservice/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/engineservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        template: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/engineservice/template/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/engineservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<EngineServiceTemplate>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/engineservice/template/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/template/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/engineservice/template/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/template/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/engineservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/engineservice/template?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/engineservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<EngineServiceTemplate>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/engineservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<EngineService>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/engineservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    event: {
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/event/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<IEvent>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/event/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/event?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<IEvent>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/event' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    eventoperational: {
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/eventoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<IEventOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/eventoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/eventoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<IEventOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/eventoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    executionresult: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionresult/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        detail: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/executionresult/detail/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/detail/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/executionresult/detail/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<ExecutionResultDetail>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/detail/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/executionresult/detail/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/detail/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/executionresult/detail/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/detail/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/executionresult/detail/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/detail/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionresult/detail?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/detail' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionresult/detail?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ExecutionResultDetail>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/detail' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionresult/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ExecutionResult>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionresult/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionresult/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionresult/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/executionresult?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/executionresult?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ExecutionResult>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionresult' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    executionsession: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionsession/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionsession/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionsession/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ExecutionSession>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionsession/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionsession/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionsession/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionsession/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionsession/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/executionsession/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionsession/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/executionsession?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionsession' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/executionsession?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ExecutionSession>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/executionsession' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    extension: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/extension/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/extension/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/extension/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<Extension>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/extension/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/extension/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/extension/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/extension/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/extension/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/extension/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/extension/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/extension?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/extension' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/extension?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<Extension>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/extension' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    externalchangeinfo: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalchangeinfo/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalchangeinfo/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalchangeinfo/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ExternalChangeInfo>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalchangeinfo/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalchangeinfo/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalchangeinfo/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalchangeinfo/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalchangeinfo/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalchangeinfo/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalchangeinfo/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/externalchangeinfo?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalchangeinfo' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/externalchangeinfo?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ExternalChangeInfo>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalchangeinfo' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    externalprogramtask: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtask/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtask/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtask/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ExternalProgramTask>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtask/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtask/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtask/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtask/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtask/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtask/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtask/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/externalprogramtask?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtask' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/externalprogramtask?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ExternalProgramTask>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtask' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    externalprogramtaskoperational: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtaskoperational/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtaskoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtaskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ExternalProgramTaskOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtaskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtaskoperational/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtaskoperational/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtaskoperational/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtaskoperational/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/externalprogramtaskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtaskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/externalprogramtaskoperational?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtaskoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/externalprogramtaskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ExternalProgramTaskOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/externalprogramtaskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    filereference: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/filereference/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/filereference/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/filereference/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<FileReference>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/filereference/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/filereference/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/filereference/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/filereference/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/filereference/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/filereference?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<FileReference>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/filereference' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    license: {
                        loginaccesstype: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccesstype/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccesstype/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccesstype/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<LicenseLoginAccessType>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccesstype/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccesstype/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccesstype/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccesstype/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccesstype/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccesstype/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccesstype/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/loginaccesstype?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccesstype' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/loginaccesstype?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<LicenseLoginAccessType>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccesstype' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        loginaccessusage: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccessusage/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccessusage/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccessusage/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<LicenseLoginAccessUsage>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccessusage/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccessusage/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccessusage/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/loginaccessusage/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccessusage/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/loginaccessusage?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<LicenseLoginAccessUsage>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/loginaccessusage' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        useraccessgroup: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessgroup/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessgroup/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessgroup/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<LicenseUserAccessGroup>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessgroup/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessgroup/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessgroup/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessgroup/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessgroup/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessgroup/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessgroup/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/useraccessgroup?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessgroup' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/useraccessgroup?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<LicenseUserAccessGroup>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessgroup' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        useraccesstype: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccesstype/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccesstype/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccesstype/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<LicenseUserAccessType>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccesstype/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccesstype/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccesstype/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccesstype/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccesstype/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccesstype/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccesstype/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/useraccesstype?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccesstype' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/useraccesstype?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<LicenseUserAccessType>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccesstype' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        useraccessusage: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessusage/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessusage/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessusage/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<LicenseUserAccessUsage>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessusage/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessusage/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessusage/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/license/useraccessusage/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessusage/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/license/useraccessusage?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<LicenseUserAccessUsage>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license/useraccessusage' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/license?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/license' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        }
                    },
                    licenseaccessusage: {
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/licenseaccessusage/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ILicenseAccessUsage>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/licenseaccessusage/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/licenseaccessusage?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ILicenseAccessUsage>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/licenseaccessusage' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    mimetype: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/mimetype/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/mimetype/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/mimetype/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<MimeType>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/mimetype/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/mimetype/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/mimetype/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/mimetype/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/mimetype/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/mimetype/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/mimetype/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/mimetype?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/mimetype' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/mimetype?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<MimeType>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/mimetype' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    printingservice: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/printingservice/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/printingservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<PrintingService>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/printingservice/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/printingservice/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/printingservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        template: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/printingservice/template/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/printingservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<PrintingServiceTemplate>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/printingservice/template/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/template/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/printingservice/template/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/template/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/printingservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/printingservice/template?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/printingservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<PrintingServiceTemplate>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/printingservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<PrintingService>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/printingservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    proxyservice: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/proxyservice/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/proxyservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ProxyService>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/proxyservice/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/proxyservice/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/proxyservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        template: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/proxyservice/template/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/proxyservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<ProxyServiceTemplate>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/proxyservice/template/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/template/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/proxyservice/template/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/template/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/proxyservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/proxyservice/template?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/proxyservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ProxyServiceTemplate>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/proxyservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ProxyService>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/proxyservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    reloadtask: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtask/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtask/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtask/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ReloadTask>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtask/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtask/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtask/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtask/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtask/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtask/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtask/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/reloadtask?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtask' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/reloadtask?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ReloadTask>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtask' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    reloadtaskoperational: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtaskoperational/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtaskoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtaskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ReloadTaskOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtaskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtaskoperational/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtaskoperational/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtaskoperational/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtaskoperational/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/reloadtaskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtaskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/reloadtaskoperational?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtaskoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/reloadtaskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ReloadTaskOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/reloadtaskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    repositoryservice: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/repositoryservice/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/repositoryservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<RepositoryService>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/repositoryservice/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/repositoryservice/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/repositoryservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        template: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/repositoryservice/template/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/repositoryservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<RepositoryServiceTemplate>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/repositoryservice/template/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/template/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/repositoryservice/template/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/template/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/repositoryservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/repositoryservice/template?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/repositoryservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<RepositoryServiceTemplate>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/repositoryservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<RepositoryService>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/repositoryservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    schedulerservice: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schedulerservice/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schedulerservice/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<SchedulerService>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schedulerservice/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schedulerservice/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schedulerservice/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        template: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/schedulerservice/template/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/schedulerservice/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<SchedulerServiceTemplate>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/schedulerservice/template/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/template/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/schedulerservice/template/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/template/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/schedulerservice/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schedulerservice/template?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schedulerservice/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<SchedulerServiceTemplate>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/schedulerservice?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<SchedulerService>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schedulerservice' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    schemaevent: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaevent/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaevent/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaevent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<SchemaEvent>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaevent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaevent/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaevent/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaevent/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaevent/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaevent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaevent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/schemaevent?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaevent' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/schemaevent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<SchemaEvent>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaevent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    schemaeventoperational: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaeventoperational/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaeventoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaeventoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<SchemaEventOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaeventoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaeventoperational/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaeventoperational/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaeventoperational/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaeventoperational/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/schemaeventoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaeventoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/schemaeventoperational?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaeventoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/schemaeventoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<SchemaEventOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/schemaeventoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    servernodeconfiguration: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servernodeconfiguration/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servernodeconfiguration/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servernodeconfiguration/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ServerNodeConfiguration>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servernodeconfiguration/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servernodeconfiguration/synthetic?filter={filter}
                             * This method is manual
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servernodeconfiguration/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servernodeconfiguration/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servernodeconfiguration/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servernodeconfiguration/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servernodeconfiguration/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/servernodeconfiguration?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servernodeconfiguration' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/servernodeconfiguration?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ServerNodeConfiguration>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servernodeconfiguration' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    servicestatus: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servicestatus/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servicestatus/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servicestatus/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ServiceStatus>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servicestatus/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servicestatus/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servicestatus/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/servicestatus/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servicestatus/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/servicestatus?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ServiceStatus>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/servicestatus' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    staticcontentreference: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/staticcontentreference/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/staticcontentreference/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/staticcontentreference/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<StaticContentReference>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/staticcontentreference/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/staticcontentreference/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/staticcontentreference/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/staticcontentreference/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/staticcontentreference/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/staticcontentreference?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<StaticContentReference>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/staticcontentreference' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    staticcontentreferencebase: {
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/staticcontentreferencebase/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<IStaticContentReferenceBase>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/staticcontentreferencebase/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/staticcontentreferencebase?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<IStaticContentReferenceBase>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/staticcontentreferencebase' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    stream: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/stream/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/stream/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/stream/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<Stream>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/stream/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/stream/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/stream/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/stream/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/stream/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/stream/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/stream/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/stream?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/stream' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/stream?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<Stream>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/stream' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    syncsession: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/syncsession/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/syncsession/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/syncsession/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<SyncSession>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/syncsession/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/syncsession/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/syncsession/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/syncsession/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/syncsession/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/syncsession?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<SyncSession>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/syncsession' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    systemrule: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/systemrule/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/systemrule/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/systemrule/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<SystemRule>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/systemrule/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/systemrule/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/systemrule/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/systemrule/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/systemrule/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/systemrule/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/systemrule/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/systemrule?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/systemrule' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/systemrule?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<SystemRule>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/systemrule' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    tag: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tag/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tag/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tag/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<Tag>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tag/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tag/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tag/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tag/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tag/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tag/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tag/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/tag?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tag' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/tag?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<Tag>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tag' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    task: {
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/task/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ITask>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/task/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/task?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ITask>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/task' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    taskoperational: {
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/taskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<ITaskOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/taskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/taskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<ITaskOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/taskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    tempcontent: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tempcontent/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tempcontent/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tempcontent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<TempContent>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tempcontent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tempcontent/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tempcontent/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/tempcontent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tempcontent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/tempcontent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<TempContent>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/tempcontent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    user: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        followingapp: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/followingapp/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/followingapp/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/followingapp/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<UserFollowingApp>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/followingapp/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/followingapp/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/followingapp/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/followingapp/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/followingapp/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/followingapp/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/followingapp/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/followingapp?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/followingapp' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/followingapp?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<UserFollowingApp>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/followingapp' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<User>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        license: {
                            useraccesstype: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/license/useraccesstype
                                 * This method is manual
                                 *
                                 * @param {LicenseUserAccessType} postParams the parameters to send as request body to the API endpoint
                                 * @returns {Promise<List<LicenseUserAccessType>>} a promise resolving to the response to the request
                                 */
                                post: function (postParams) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/license/useraccesstype',
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            }
                        },
                        recentapp: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/recentapp/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/recentapp/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/recentapp/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<UserRecentApp>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/recentapp/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/recentapp/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/recentapp/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/recentapp/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/recentapp/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/user/recentapp/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/recentapp/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/recentapp?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/recentapp' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/recentapp?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<UserRecentApp>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/recentapp' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/user/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/user?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/user?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<User>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/user' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    userdirectory: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/userdirectory/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/userdirectory/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<UserDirectory>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/userdirectory/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/userdirectory/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/userdirectory/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        template: {
                            count: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/userdirectory/template/count?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                                 */
                                get: function (filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            full: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/userdirectory/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} orderby the orderby parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<List<UserDirectoryTemplate>>} a promise resolving to the response to the request
                                 */
                                get: function (filter, orderby, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            synthetic: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/userdirectory/template/synthetic?filter={filter}
                                 * This method is generated
                                 *
                                 * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @returns {Promise} a promise resolving without a return value when the request is finished
                                 */
                                put: function (postParams, filter) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/template/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'PUT'
                                    }, postParams);
                                },
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/userdirectory/template/synthetic?filter={filter}&privileges={appendprivileges}
                                 * This method is generated
                                 *
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} appendprivileges the appendprivileges parameter
                                 * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                                 */
                                get: function (filter, appendprivileges) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/template/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            },
                            table: {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/selection/{id}/userdirectory/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                                 * This method is generated
                                 *
                                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                                 * @param {string=} filter the filter parameter
                                 * @param {string=} skip the skip parameter
                                 * @param {string=} take the take parameter
                                 * @param {string=} sortcolumn the sortcolumn parameter
                                 * @param {string=} orderascending the orderascending parameter
                                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                                 */
                                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'POST'
                                    }, postParams);
                                }
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/userdirectory/template?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            delete: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'DELETE'
                                });
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/userdirectory/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<UserDirectoryTemplate>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/userdirectory?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/userdirectory?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<UserDirectory>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/userdirectory' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    usersynctask: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctask/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctask/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctask/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<UserSyncTask>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctask/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctask/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctask/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctask/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctask/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctask/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctask/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/usersynctask?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctask' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/usersynctask?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<UserSyncTask>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctask' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    usersynctaskoperational: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctaskoperational/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctaskoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctaskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<UserSyncTaskOperational>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctaskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctaskoperational/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctaskoperational/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctaskoperational/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctaskoperational/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/usersynctaskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctaskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/usersynctaskoperational?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctaskoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/usersynctaskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<UserSyncTaskOperational>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/usersynctaskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    virtualproxyconfig: {
                        count: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/virtualproxyconfig/count?filter={filter}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @returns {Promise<Int32>} a promise resolving to the response to the request
                             */
                            get: function (filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/virtualproxyconfig/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        full: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/virtualproxyconfig/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} orderby the orderby parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<List<VirtualProxyConfig>>} a promise resolving to the response to the request
                             */
                            get: function (filter, orderby, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/virtualproxyconfig/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        synthetic: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/virtualproxyconfig/synthetic?filter={filter}
                             * This method is generated
                             *
                             * @param {SyntheticRootEntity} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @returns {Promise} a promise resolving without a return value when the request is finished
                             */
                            put: function (postParams, filter) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/virtualproxyconfig/synthetic' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'PUT'
                                }, postParams);
                            },
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/virtualproxyconfig/synthetic?filter={filter}&privileges={appendprivileges}
                             * This method is generated
                             *
                             * @param {string=} filter the filter parameter
                             * @param {string=} appendprivileges the appendprivileges parameter
                             * @returns {Promise<SyntheticEntity>} a promise resolving to the response to the request
                             */
                            get: function (filter, appendprivileges) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/virtualproxyconfig/synthetic' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        },
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{id}/virtualproxyconfig/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/virtualproxyconfig/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/virtualproxyconfig?filter={filter}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function (filter) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/virtualproxyconfig' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/selection/{id}/virtualproxyconfig?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} filter the filter parameter
                         * @param {string=} orderby the orderby parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<List<VirtualProxyConfig>>} a promise resolving to the response to the request
                         */
                        get: function (filter, orderby, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '/virtualproxyconfig' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/{id}?privileges={appendprivileges}
                     * This method is manual
                     *
                     * @param {Selection} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            selectionid: function(selectionid) {
                return {
                    appcomponent: {
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{selectionid}/appcomponent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + selectionid + '/appcomponent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        }
                    },
                    event: {
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{selectionid}/event/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + selectionid + '/event/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        }
                    },
                    eventoperational: {
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{selectionid}/eventoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + selectionid + '/eventoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        }
                    },
                    licenseaccessusage: {
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{selectionid}/licenseaccessusage/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + selectionid + '/licenseaccessusage/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        }
                    },
                    staticcontentreferencebase: {
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{selectionid}/staticcontentreferencebase/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + selectionid + '/staticcontentreferencebase/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        }
                    },
                    task: {
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{selectionid}/task/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + selectionid + '/task/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        }
                    },
                    taskoperational: {
                        table: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/selection/{selectionid}/taskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                             * This method is generated
                             *
                             * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                             * @param {string=} filter the filter parameter
                             * @param {string=} skip the skip parameter
                             * @param {string=} take the take parameter
                             * @param {string=} sortcolumn the sortcolumn parameter
                             * @param {string=} orderascending the orderascending parameter
                             * @returns {Promise<ITable>} a promise resolving to the response to the request
                             */
                            post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/' + selectionid + '/taskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                }, postParams);
                            }
                        }
                    }
                };
            },
            app: {
                content: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/app/content?filter={filter}
                     * This method is manual
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/app/content' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                datasegment: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/app/datasegment?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/app/datasegment' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                internal: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/app/internal?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/app/internal' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                object: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/app/object?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/app/object' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/app?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/app' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            appavailability: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/appavailability?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/appavailability' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            appcontentquota: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/appcontentquota?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/appcontentquota' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            appseedinfo: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/appseedinfo?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/appseedinfo' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            appstatus: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/appstatus?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/appstatus' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            binarydelete: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/binarydelete?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/binarydelete' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            binarydownload: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/binarydownload?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/binarydownload' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            binarysyncruleevaluation: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/binarysyncruleevaluation?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/binarysyncruleevaluation' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            compositeevent: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/compositeevent?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/compositeevent' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            compositeeventoperational: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/compositeeventoperational?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/compositeeventoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            compositeeventruleoperational: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/compositeeventruleoperational?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/compositeeventruleoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            contentlibrary: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/contentlibrary?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/contentlibrary' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            custompropertydefinition: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/custompropertydefinition?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/custompropertydefinition' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            dataconnection: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/dataconnection?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/dataconnection' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            engineservice: {
                template: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/engineservice/template?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/engineservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/engineservice?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/engineservice' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            executionresult: {
                detail: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/executionresult/detail?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/executionresult/detail' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/executionresult?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/executionresult' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            executionsession: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/executionsession?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/executionsession' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            extension: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/extension?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/extension' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            externalchangeinfo: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/externalchangeinfo?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/externalchangeinfo' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            externalprogramtask: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/externalprogramtask?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/externalprogramtask' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            externalprogramtaskoperational: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/externalprogramtaskoperational?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/externalprogramtaskoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            filereference: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/filereference?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/filereference' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Selection>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            license: {
                loginaccesstype: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/license/loginaccesstype?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/license/loginaccesstype' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                loginaccessusage: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/license/loginaccessusage?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/license/loginaccessusage' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                useraccessgroup: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/license/useraccessgroup?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/license/useraccessgroup' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                useraccesstype: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/license/useraccesstype?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/license/useraccesstype' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                useraccessusage: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/license/useraccessusage?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/license/useraccessusage' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<Selection>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Selection>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            mimetype: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/mimetype?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/mimetype' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {Selection} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            printingservice: {
                template: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/printingservice/template?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/printingservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/printingservice?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/printingservice' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            proxyservice: {
                template: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/proxyservice/template?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/proxyservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/proxyservice?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/proxyservice' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            reloadtask: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/reloadtask?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/reloadtask' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            reloadtaskoperational: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/reloadtaskoperational?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/reloadtaskoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            repositoryservice: {
                template: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/repositoryservice/template?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/repositoryservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/repositoryservice?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/repositoryservice' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            schedulerservice: {
                template: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/schedulerservice/template?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/schedulerservice/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/schedulerservice?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/schedulerservice' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            schemaevent: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/schemaevent?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/schemaevent' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            schemaeventoperational: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/schemaeventoperational?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/schemaeventoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            servernodeconfiguration: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/servernodeconfiguration?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/servernodeconfiguration' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            servicestatus: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/servicestatus?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/servicestatus' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            staticcontentreference: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/staticcontentreference?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/staticcontentreference' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            stream: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/stream?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/stream' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            syncsession: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/syncsession?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/syncsession' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            systemrule: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/systemrule?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/systemrule' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            tag: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/tag?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/tag' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            tempcontent: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/tempcontent?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/tempcontent' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            user: {
                followingapp: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/user/followingapp?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/user/followingapp' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                recentapp: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/user/recentapp?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/user/recentapp' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/user?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/user' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            userdirectory: {
                template: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/selection/userdirectory/template?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Selection>} a promise resolving to the response to the request
                     */
                    post: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/userdirectory/template' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/userdirectory?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/userdirectory' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            usersynctask: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/usersynctask?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/usersynctask' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            usersynctaskoperational: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/usersynctaskoperational?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/usersynctaskoperational' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            virtualproxyconfig: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/selection/virtualproxyconfig?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Selection>} a promise resolving to the response to the request
                 */
                post: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection/virtualproxyconfig' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/selection?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<Selection>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/selection?privileges={appendprivileges}
             * This method is generated
             *
             * @param {Selection} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<Selection>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/selection' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        servernodeconfiguration: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/servernodeconfiguration/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/servernodeconfiguration/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ServerNodeConfiguration>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/servernodeconfiguration/{id}?privileges={appendprivileges}
                     * This method is manual
                     *
                     * @param {ServerNodeConfiguration} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ServerNodeConfiguration>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            container: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servernodeconfiguration/container
                 * This method is manual
                 *
                 * @returns {Promise<ServerNodeCreationContainer>} a promise resolving to the response to the request
                 */
                get: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/container',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servernodeconfiguration/container?privileges={appendprivileges}
                 * This method is manual
                 *
                 * @param {ServerNodeCreationContainer} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<ServerNodeResultContainer>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/container' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servernodeconfiguration/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servernodeconfiguration/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ServerNodeConfiguration>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servernodeconfiguration/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/servernodeconfiguration?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ServerNodeConfiguration>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernodeconfiguration' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        servernoderegistration: {
            start: {
                servernodeconfigurationid: function(servernodeconfigurationid) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/servernoderegistration/start/{servernodeconfigurationid}
                         * This method is manual
                         *
                         * @returns {Promise<String>} a promise resolving to the response to the request
                         */
                        get: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servernoderegistration/start/' + servernodeconfigurationid + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    };
                }
            }
        },
        servicestatus: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/servicestatus/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<ServiceStatus>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servicestatus/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servicestatus/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servicestatus/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servicestatus/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ServiceStatus>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servicestatus/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/servicestatus/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servicestatus/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/servicestatus?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ServiceStatus>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/servicestatus' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        staticcontent: {
            enumeratefiles: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/staticcontent/enumeratefiles?path={path}
                 * This method is manual
                 *
                 * @param {string=} path the path parameter
                 * @returns {Promise<List<EnumerateFilesResult>>} a promise resolving to the response to the request
                 */
                get: function (path) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontent/enumeratefiles' + core.ifNotUndef(path, '?path=' + path, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            }
        },
        staticcontentreference: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/staticcontentreference/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<StaticContentReference>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreference/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/staticcontentreference/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreference/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/staticcontentreference/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<StaticContentReference>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreference/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/staticcontentreference/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreference/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/staticcontentreference?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<StaticContentReference>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreference' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        staticcontentreferencebase: {
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/staticcontentreferencebase/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<IStaticContentReferenceBase>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreferencebase/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/staticcontentreferencebase/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreferencebase/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/staticcontentreferencebase?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<IStaticContentReferenceBase>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/staticcontentreferencebase' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        stream: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/stream/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/stream/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Stream>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/stream/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {Stream} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Stream>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/stream/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/stream/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Stream>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/stream/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<Stream>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Stream>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/stream/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {Stream} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/stream/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/stream?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<Stream>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/stream?privileges={appendprivileges}
             * This method is generated
             *
             * @param {Stream} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<Stream>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/stream' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        sync: {
            snapshot: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/sync/snapshot
                 * This method is manual
                 *
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/sync/snapshot',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            }
        },
        syncsession: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/syncsession/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SyncSession>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/syncsession/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/syncsession/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/syncsession/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/syncsession/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SyncSession>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/syncsession/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/syncsession/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/syncsession/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/syncsession?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<SyncSession>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/syncsession' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        systemrule: {
            category: function(category) {
                return {
                    associatedrules: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/systemrule/{category}/associatedrules?resourcetype={resourcetype}&resourcefilter={resourcefilter}&privileges={appendprivileges}
                         * This method is manual
                         *
                         * @param {string=} resourcetype the resourcetype parameter
                         * @param {string=} resourcefilter the resourcefilter parameter
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<IList<SystemRule>>} a promise resolving to the response to the request
                         */
                        get: function (resourcetype, resourcefilter, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/' + category + '/associatedrules' + (core.ifNotUndef(resourcetype, '&resourcetype=' + resourcetype, '') + core.ifNotUndef(resourcefilter, '&resourcefilter=' + resourcefilter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    }
                };
            },
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SystemRule>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {SystemRule} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<SystemRule>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/systemrule/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/systemrule/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SystemRule>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            license: {
                audit: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/license/audit
                     * This method is manual
                     *
                     * @param {AuditParameters} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<AuditResult>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/license/audit',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    },
                    preview: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/systemrule/license/audit/preview
                         * This method is manual
                         *
                         * @param {AuditPreviewParameters} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise<AuditPreviewResult>} a promise resolving to the response to the request
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/license/audit/preview',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    }
                },
                useractions: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/license/useractions?privileges={appendprivileges}
                     * This method is manual
                     *
                     * @param {UserInput} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserLicenseActions>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/license/useractions' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/systemrule/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<SystemRule>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<SystemRule>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/systemrule/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {SystemRule} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            security: {
                accessibleattributes: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/security/accessibleattributes?resourcetype={resourcetype}
                     * This method is manual
                     *
                     * @param {string=} resourcetype the resourcetype parameter
                     * @returns {Promise<List<String>>} a promise resolving to the response to the request
                     */
                    get: function (resourcetype) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/accessibleattributes' + core.ifNotUndef(resourcetype, '?resourcetype=' + resourcetype, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                attributevalues: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/security/attributevalues?resourcetype={resourcetype}&attribute={attribute}&filter={filter}&limit={limit}&selection={selection}
                     * This method is manual
                     *
                     * @param {string=} resourcetype the resourcetype parameter
                     * @param {string=} attribute the attribute parameter
                     * @param {string=} filter the filter parameter
                     * @param {string=} limit the limit parameter
                     * @param {string=} selection the selection parameter
                     * @returns {Promise<List<String>>} a promise resolving to the response to the request
                     */
                    get: function (resourcetype, attribute, filter, limit, selection) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/attributevalues' + (core.ifNotUndef(resourcetype, '&resourcetype=' + resourcetype, '') + core.ifNotUndef(attribute, '&attribute=' + attribute, '') + core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(limit, '&limit=' + limit, '') + core.ifNotUndef(selection, '&selection=' + selection, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                audit: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/security/audit
                     * This method is manual
                     *
                     * @param {AuditParameters} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<AuditResult>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/audit',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    },
                    accessibleobjects: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/systemrule/security/audit/accessibleobjects
                         * This method is manual
                         *
                         * @param {AccessibleObjectParameters} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise<List<IRepositoryObject>>} a promise resolving to the response to the request
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/audit/accessibleobjects',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    },
                    countresources: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/systemrule/security/audit/countresources
                         * This method is manual
                         *
                         * @param {AuditCountParameters} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise<Int32>} a promise resolving to the response to the request
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/audit/countresources',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    },
                    export: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/systemrule/security/audit/export
                         * This method is manual
                         *
                         * @returns {Promise<List<String>>} a promise resolving to the response to the request
                         */
                        get: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/audit/export',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        }
                    },
                    preview: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/systemrule/security/audit/preview
                         * This method is manual
                         *
                         * @param {AuditPreviewParameters} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise<AuditPreviewResult>} a promise resolving to the response to the request
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/audit/preview',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    }
                },
                evaluatetransientresources: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/security/evaluatetransientresources
                     * This method is manual
                     *
                     * @param {String[]} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<IEnumerable`1>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/evaluatetransientresources',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                parsetree: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/security/parsetree?rule={rule}
                     * This method is manual
                     *
                     * @param {string=} rule the rule parameter
                     * @returns {Promise<BacktrackedRule>} a promise resolving to the response to the request
                     */
                    get: function (rule) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/parsetree' + core.ifNotUndef(rule, '?rule=' + rule, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                referenceduserroles: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/security/referenceduserroles
                     * This method is manual
                     *
                     * @returns {Promise<List<String>>} a promise resolving to the response to the request
                     */
                    get: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/referenceduserroles',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                useractions: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/security/useractions?privileges={appendprivileges}
                     * This method is manual
                     *
                     * @param {UserInput} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserActions>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/security/useractions' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                }
            },
            sync: {
                audit: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/sync/audit
                     * This method is manual
                     *
                     * @param {SyncAuditParameters} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<SyncAuditResult>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/sync/audit',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    },
                    preview: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/systemrule/sync/audit/preview
                         * This method is manual
                         *
                         * @param {SyncAuditPreviewParameters} postParams the parameters to send as request body to the API endpoint
                         * @returns {Promise<SyncPreviewResult>} a promise resolving to the response to the request
                         */
                        post: function (postParams) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/sync/audit/preview',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            }, postParams);
                        }
                    }
                },
                linkednodes: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/sync/linkednodes?resourcetype={resourcetype}&resourceid={resourceid}
                     * This method is manual
                     *
                     * @param {string=} resourcetype the resourcetype parameter
                     * @param {string=} resourceid the resourceid parameter
                     * @returns {Promise<List<Guid>>} a promise resolving to the response to the request
                     */
                    get: function (resourcetype, resourceid) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/sync/linkednodes' + (core.ifNotUndef(resourcetype, '&resourcetype=' + resourcetype, '') + core.ifNotUndef(resourceid, '&resourceid=' + resourceid, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                linkedobjects: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/systemrule/sync/linkedobjects?node={servernodeconfiguration}&resourcetype={resourcetype}
                     * This method is manual
                     *
                     * @param {string=} servernodeconfiguration the servernodeconfiguration parameter
                     * @param {string=} resourcetype the resourcetype parameter
                     * @returns {Promise<List<Guid>>} a promise resolving to the response to the request
                     */
                    get: function (servernodeconfiguration, resourcetype) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/sync/linkedobjects' + (core.ifNotUndef(servernodeconfiguration, '&node=' + servernodeconfiguration, '') + core.ifNotUndef(resourcetype, '&resourcetype=' + resourcetype, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/systemrule/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/systemrule?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<SystemRule>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/systemrule?privileges={appendprivileges}
             * This method is generated
             *
             * @param {SystemRule} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<SystemRule>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/systemrule' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        tag: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/tag/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/tag/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Tag>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/tag/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {Tag} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<Tag>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tag/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tag/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Tag>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tag/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<Tag>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<Tag>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tag/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {Tag} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tag/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/tag?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<Tag>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/tag?privileges={appendprivileges}
             * This method is generated
             *
             * @param {Tag} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<Tag>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tag' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        task: {
            id: function(id) {
                return {
                    start: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/task/{id}/start
                         * This method is manual
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        post: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/' + id + '/start',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            });
                        },
                        synchronous: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/task/{id}/start/synchronous
                             * This method is manual
                             *
                             * @returns {Promise<Guid>} a promise resolving to the response to the request
                             */
                            post: function () {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/' + id + '/start/synchronous',
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'POST'
                                });
                            }
                        }
                    },
                    stop: {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/task/{id}/stop
                         * This method is manual
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        post: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/' + id + '/stop',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'POST'
                            });
                        }
                    }
                };
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/task/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ITask>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            start: {
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/task/start/many
                     * This method is manual
                     *
                     * @param {Guid[]} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/start/many',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                synchronous: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/task/start/synchronous?name={name}
                     * This method is manual
                     *
                     * @param {string=} name the name parameter
                     * @returns {Promise<Guid>} a promise resolving to the response to the request
                     */
                    post: function (name) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/start/synchronous' + core.ifNotUndef(name, '?name=' + name, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        });
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/task/start?name={name}
                 * This method is manual
                 *
                 * @param {string=} name the name parameter
                 * @returns {Promise} a promise resolving without a return value when the request is finished
                 */
                post: function (name) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/start' + core.ifNotUndef(name, '?name=' + name, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            stop: {
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/task/stop/many
                     * This method is manual
                     *
                     * @param {Guid[]} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/stop/many',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/task/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/task?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ITask>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/task' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        taskoperational: {
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/taskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<ITaskOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/taskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/taskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/taskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/taskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<ITaskOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/taskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        tempcontent: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/tempcontent/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<TempContent>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tempcontent/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tempcontent/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tempcontent/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tempcontent/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<TempContent>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tempcontent/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/tempcontent/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tempcontent/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/tempcontent?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<TempContent>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/tempcontent' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            }
        },
        user: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<User>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {User} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<User>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            followingapp: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/user/followingapp/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/user/followingapp/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<UserFollowingApp>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/user/followingapp/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {UserFollowingApp} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<UserFollowingApp>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/followingapp/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/followingapp/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserFollowingApp>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/followingapp/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<UserFollowingApp>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserFollowingApp>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/followingapp/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {UserFollowingApp} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/followingapp/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/followingapp?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserFollowingApp>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/followingapp?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {UserFollowingApp} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<UserFollowingApp>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/followingapp' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<User>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<User>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<User>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            ownedresources: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/ownedresources?userselection={selectionid}&limit={limit}&filter={filter}&privileges={appendprivileges}
                 * This method is manual
                 *
                 * @param {string=} selectionid the selectionid parameter
                 * @param {string=} limit the limit parameter
                 * @param {string=} filter the filter parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<IList<OwnedResourceResult>>} a promise resolving to the response to the request
                 */
                get: function (selectionid, limit, filter, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/ownedresources' + (core.ifNotUndef(selectionid, '&userselection=' + selectionid, '') + core.ifNotUndef(limit, '&limit=' + limit, '') + core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {User} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            recentapp: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/user/recentapp/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/user/recentapp/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<UserRecentApp>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/user/recentapp/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {UserRecentApp} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<UserRecentApp>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/recentapp/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/recentapp/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserRecentApp>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/recentapp/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<UserRecentApp>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserRecentApp>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/recentapp/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {UserRecentApp} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/user/recentapp/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/recentapp?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserRecentApp>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/recentapp?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {UserRecentApp} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<UserRecentApp>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/recentapp' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            sync: {
                userdirectory: function(userdirectory) {
                    return {
                        userid: function(userid) {
                            return {
                                /**
                                 * Makes a request on the Qlik Sense QRS API:
                                 * /qrs/user/sync/{userdirectory}/{userid}
                                 * This method is manual
                                 *
                                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                                 */
                                get: function () {
                                    var restUri = url.parse(options.restUri);
                                    return base.request({
                                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/sync/' + userdirectory + '/' + userid + '',
                                        pfx: options.pfx,
                                        passPhrase: options.passPhrase,
                                        UserId: options.UserId,
                                        UserDirectory: options.UserDirectory,
                                        timeout: core.ifNotUndef(options.timeout, 60000),
                                        method: 'GET'
                                    });
                                }
                            };
                        }
                    };
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/user/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/user?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<User>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/user?privileges={appendprivileges}
             * This method is generated
             *
             * @param {User} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<User>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/user' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        userdirectory: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<UserDirectory>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {UserDirectory} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<UserDirectory>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectory/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectory/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserDirectory>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectory/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<UserDirectory>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserDirectory>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectory/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {UserDirectory} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectory/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            template: {
                id: function(id) {
                    return {
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/userdirectory/template/{id}
                         * This method is generated
                         *
                         * @returns {Promise} a promise resolving without a return value when the request is finished
                         */
                        delete: function () {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/' + id + '',
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'DELETE'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/userdirectory/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<UserDirectoryTemplate>} a promise resolving to the response to the request
                         */
                        get: function (appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'GET'
                            });
                        },
                        /**
                         * Makes a request on the Qlik Sense QRS API:
                         * /qrs/userdirectory/template/{id}?privileges={appendprivileges}
                         * This method is generated
                         *
                         * @param {UserDirectoryTemplate} postParams the parameters to send as request body to the API endpoint
                         * @param {string=} appendprivileges the appendprivileges parameter
                         * @returns {Promise<UserDirectoryTemplate>} a promise resolving to the response to the request
                         */
                        put: function (postParams, appendprivileges) {
                            var restUri = url.parse(options.restUri);
                            return base.request({
                                restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                                pfx: options.pfx,
                                passPhrase: options.passPhrase,
                                UserId: options.UserId,
                                UserDirectory: options.UserDirectory,
                                timeout: core.ifNotUndef(options.timeout, 60000),
                                method: 'PUT'
                            }, postParams);
                        }
                    };
                },
                count: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/template/count?filter={filter}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @returns {Promise<Int32>} a promise resolving to the response to the request
                     */
                    get: function (filter) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                full: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/template/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} filter the filter parameter
                     * @param {string=} orderby the orderby parameter
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserDirectoryTemplate>>} a promise resolving to the response to the request
                     */
                    get: function (filter, orderby, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    }
                },
                many: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/template/many?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {List<UserDirectoryTemplate>} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<List<UserDirectoryTemplate>>} a promise resolving to the response to the request
                     */
                    post: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                previewcreateprivilege: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/template/previewcreateprivilege
                     * This method is generated
                     *
                     * @param {UserDirectoryTemplate} postParams the parameters to send as request body to the API endpoint
                     * @returns {Promise<Boolean>} a promise resolving to the response to the request
                     */
                    post: function (postParams) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/previewcreateprivilege',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                table: {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/userdirectory/template/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                     * This method is generated
                     *
                     * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} filter the filter parameter
                     * @param {string=} skip the skip parameter
                     * @param {string=} take the take parameter
                     * @param {string=} sortcolumn the sortcolumn parameter
                     * @param {string=} orderascending the orderascending parameter
                     * @returns {Promise<ITable>} a promise resolving to the response to the request
                     */
                    post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'POST'
                        }, postParams);
                    }
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectory/template?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserDirectoryTemplate>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                },
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectory/template?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {UserDirectoryTemplate} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<UserDirectoryTemplate>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory/template' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/userdirectory?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<UserDirectory>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/userdirectory?privileges={appendprivileges}
             * This method is generated
             *
             * @param {UserDirectory} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<UserDirectory>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectory' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        userdirectoryconnector: {
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/userdirectoryconnector
             * This method is manual
             *
             * @returns {Promise<Dictionary<String>} a promise resolving to the response to the request
             */
            get: function () {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectoryconnector',
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            deleteudandusers: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectoryconnector/deleteudandusers?userdirectoryid={userdirectoryid}
                 * This method is manual
                 *
                 * @param {string=} userdirectoryid the userdirectoryid parameter
                 * @returns {Promise} a promise resolving without a return value when the request is finished
                 */
                delete: function (userdirectoryid) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectoryconnector/deleteudandusers' + core.ifNotUndef(userdirectoryid, '?userdirectoryid=' + userdirectoryid, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'DELETE'
                    });
                }
            },
            refreshudctypes: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectoryconnector/refreshudctypes
                 * This method is manual
                 *
                 * @returns {Promise<Dictionary<String>} a promise resolving to the response to the request
                 */
                post: function () {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectoryconnector/refreshudctypes',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    });
                }
            },
            syncuserdirectories: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/userdirectoryconnector/syncuserdirectories
                 * This method is manual
                 *
                 * @param {Guid[]} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise} a promise resolving without a return value when the request is finished
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/userdirectoryconnector/syncuserdirectories',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            }
        },
        usersynctask: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/usersynctask/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/usersynctask/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<UserSyncTask>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/usersynctask/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {UserSyncTask} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<UserSyncTask>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctask/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctask/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserSyncTask>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctask/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<UserSyncTask>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserSyncTask>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctask/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {UserSyncTask} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctask/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/usersynctask?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<UserSyncTask>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/usersynctask?privileges={appendprivileges}
             * This method is generated
             *
             * @param {UserSyncTask} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<UserSyncTask>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctask' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        usersynctaskoperational: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/usersynctaskoperational/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/usersynctaskoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<UserSyncTaskOperational>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/usersynctaskoperational/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {UserSyncTaskOperational} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<UserSyncTaskOperational>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctaskoperational/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctaskoperational/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserSyncTaskOperational>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctaskoperational/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<UserSyncTaskOperational>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<UserSyncTaskOperational>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctaskoperational/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {UserSyncTaskOperational} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/usersynctaskoperational/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/usersynctaskoperational?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<UserSyncTaskOperational>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/usersynctaskoperational?privileges={appendprivileges}
             * This method is generated
             *
             * @param {UserSyncTaskOperational} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<UserSyncTaskOperational>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/usersynctaskoperational' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        },
        virtualproxyconfig: {
            id: function(id) {
                return {
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/virtualproxyconfig/{id}
                     * This method is generated
                     *
                     * @returns {Promise} a promise resolving without a return value when the request is finished
                     */
                    delete: function () {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/' + id + '',
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'DELETE'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/virtualproxyconfig/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<VirtualProxyConfig>} a promise resolving to the response to the request
                     */
                    get: function (appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'GET'
                        });
                    },
                    /**
                     * Makes a request on the Qlik Sense QRS API:
                     * /qrs/virtualproxyconfig/{id}?privileges={appendprivileges}
                     * This method is generated
                     *
                     * @param {VirtualProxyConfig} postParams the parameters to send as request body to the API endpoint
                     * @param {string=} appendprivileges the appendprivileges parameter
                     * @returns {Promise<VirtualProxyConfig>} a promise resolving to the response to the request
                     */
                    put: function (postParams, appendprivileges) {
                        var restUri = url.parse(options.restUri);
                        return base.request({
                            restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/' + id + '' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                            pfx: options.pfx,
                            passPhrase: options.passPhrase,
                            UserId: options.UserId,
                            UserDirectory: options.UserDirectory,
                            timeout: core.ifNotUndef(options.timeout, 60000),
                            method: 'PUT'
                        }, postParams);
                    }
                };
            },
            vpid: function(vpid) {
                return {
                    generate: {
                        samlmetadata: {
                            /**
                             * Makes a request on the Qlik Sense QRS API:
                             * /qrs/virtualproxyconfig/{vpid}/generate/samlmetadata
                             * This method is manual
                             *
                             * @returns {Promise<Guid>} a promise resolving to the response to the request
                             */
                            get: function () {
                                var restUri = url.parse(options.restUri);
                                return base.request({
                                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/' + vpid + '/generate/samlmetadata',
                                    pfx: options.pfx,
                                    passPhrase: options.passPhrase,
                                    UserId: options.UserId,
                                    UserDirectory: options.UserDirectory,
                                    timeout: core.ifNotUndef(options.timeout, 60000),
                                    method: 'GET'
                                });
                            }
                        }
                    }
                };
            },
            count: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/virtualproxyconfig/count?filter={filter}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @returns {Promise<Int32>} a promise resolving to the response to the request
                 */
                get: function (filter) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/count' + core.ifNotUndef(filter, '?filter=' + filter, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            full: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/virtualproxyconfig/full?filter={filter}&orderby={orderby}&privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {string=} filter the filter parameter
                 * @param {string=} orderby the orderby parameter
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<VirtualProxyConfig>>} a promise resolving to the response to the request
                 */
                get: function (filter, orderby, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/full' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'GET'
                    });
                }
            },
            many: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/virtualproxyconfig/many?privileges={appendprivileges}
                 * This method is generated
                 *
                 * @param {List<VirtualProxyConfig>} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} appendprivileges the appendprivileges parameter
                 * @returns {Promise<List<VirtualProxyConfig>>} a promise resolving to the response to the request
                 */
                post: function (postParams, appendprivileges) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/many' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            previewcreateprivilege: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/virtualproxyconfig/previewcreateprivilege
                 * This method is generated
                 *
                 * @param {VirtualProxyConfig} postParams the parameters to send as request body to the API endpoint
                 * @returns {Promise<Boolean>} a promise resolving to the response to the request
                 */
                post: function (postParams) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/previewcreateprivilege',
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            table: {
                /**
                 * Makes a request on the Qlik Sense QRS API:
                 * /qrs/virtualproxyconfig/table?filter={filter}&skip={skip}&take={take}&sortcolumn={sortcolumn}&orderascending={orderascending}
                 * This method is generated
                 *
                 * @param {TableDefinition} postParams the parameters to send as request body to the API endpoint
                 * @param {string=} filter the filter parameter
                 * @param {string=} skip the skip parameter
                 * @param {string=} take the take parameter
                 * @param {string=} sortcolumn the sortcolumn parameter
                 * @param {string=} orderascending the orderascending parameter
                 * @returns {Promise<ITable>} a promise resolving to the response to the request
                 */
                post: function (postParams, filter, skip, take, sortcolumn, orderascending) {
                    var restUri = url.parse(options.restUri);
                    return base.request({
                        restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig/table' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(skip, '&skip=' + skip, '') + core.ifNotUndef(take, '&take=' + take, '') + core.ifNotUndef(sortcolumn, '&sortcolumn=' + sortcolumn, '') + core.ifNotUndef(orderascending, '&orderascending=' + orderascending, '')).replace(/^&/, '?'),
                        pfx: options.pfx,
                        passPhrase: options.passPhrase,
                        UserId: options.UserId,
                        UserDirectory: options.UserDirectory,
                        timeout: core.ifNotUndef(options.timeout, 60000),
                        method: 'POST'
                    }, postParams);
                }
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/virtualproxyconfig?filter={filter}&orderby={orderby}&privileges={appendprivileges}
             * This method is generated
             *
             * @param {string=} filter the filter parameter
             * @param {string=} orderby the orderby parameter
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<List<VirtualProxyConfig>>} a promise resolving to the response to the request
             */
            get: function (filter, orderby, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig' + (core.ifNotUndef(filter, '&filter=' + filter, '') + core.ifNotUndef(orderby, '&orderby=' + orderby, '') + core.ifNotUndef(appendprivileges, '&privileges=' + appendprivileges, '')).replace(/^&/, '?'),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'GET'
                });
            },
            /**
             * Makes a request on the Qlik Sense QRS API:
             * /qrs/virtualproxyconfig?privileges={appendprivileges}
             * This method is generated
             *
             * @param {VirtualProxyConfig} postParams the parameters to send as request body to the API endpoint
             * @param {string=} appendprivileges the appendprivileges parameter
             * @returns {Promise<VirtualProxyConfig>} a promise resolving to the response to the request
             */
            post: function (postParams, appendprivileges) {
                var restUri = url.parse(options.restUri);
                return base.request({
                    restUri: 'https://' + restUri.hostname + ':' + restUri.port + '/qrs/virtualproxyconfig' + core.ifNotUndef(appendprivileges, '?privileges=' + appendprivileges, ''),
                    pfx: options.pfx,
                    passPhrase: options.passPhrase,
                    UserId: options.UserId,
                    UserDirectory: options.UserDirectory,
                    timeout: core.ifNotUndef(options.timeout, 60000),
                    method: 'POST'
                }, postParams);
            }
        }
    }
};

